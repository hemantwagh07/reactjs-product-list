{"version":3,"sources":["Components/ProductGrid/index.js","Components/Product/index.js","Components/ProductDetails/index.js","App.js","serviceWorker.js","index.js"],"names":["ProductGrid","props","productData","map","id","image","productName","to","key","className","src","alt","Product","componentDidMount","Axios","get","then","response","setState","categories","data","getproducts","catch","error","console","log","ev","categoryId","selectedCategory","undefined","target","value","products","state","htmlFor","onChange","this","name","Component","ProductDetails","getCategoryDetails","categoryDetails","productDetails","match","params","description","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec48eacd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function ProductGrid(props) {\r\n    let { productData } = props;\r\n    return (\r\n        productData.map(({ id, image, productName }) => (\r\n            <Link to={'/product/' + id} key={id}>\r\n                <div className=\"col-sm-4\">\r\n                    <div className=\"card\">\r\n                        <img className=\"card-img-top\" src={image} alt={productName} />\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-title\">{productName}</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        ))\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nimport ProductGrid from '../ProductGrid';\r\n\r\nexport default class Product extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        \r\n        this.state = {\r\n            categories: [],\r\n            products: [],\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        Axios.get('http://localhost:3001/categories')\r\n            .then(response => {\r\n                // handle success\r\n                this.setState({ categories: response.data });\r\n                this.getproducts('', response.data[0].id)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    getproducts = (ev, categoryId) => {\r\n        let selectedCategory = null;\r\n        if (categoryId !== undefined) {\r\n            selectedCategory = categoryId;\r\n        } else {\r\n            selectedCategory = ev.target.value\r\n        }\r\n        Axios.get('http://localhost:3001/products?categoryId=' + selectedCategory)\r\n            .then(response => {\r\n                // handle success\r\n                this.setState({ products: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>Product Listing Page</h2>\r\n\r\n                <div className=\"form-group row\">\r\n                    <label htmlFor=\"category\" className=\"col-sm-4\">Category</label>\r\n                    <select className=\"form-control col-sm-2\" id=\"category\" onChange={this.getproducts}>\r\n                        {\r\n                            this.state.categories.map(({id,name}) => (\r\n                                <option key={id} value={id}>{name}</option>\r\n                            ))\r\n                        }\r\n                    </select>\r\n                </div>\r\n\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <ProductGrid productData={this.state.products} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\nexport default class ProductDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            productDetails: {},\r\n            categoryDetails: {}\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Axios.get('http://localhost:3001/products/' + this.props.match.params.id)\r\n            .then((response) => {\r\n                // handle success                \r\n                this.setState({ productDetails: response.data });\r\n                this.getCategoryDetails(response.data.categoryId);\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    getCategoryDetails = (categoryId) => {\r\n        Axios.get('http://localhost:3001/categories/' + categoryId)\r\n            .then((response) => {\r\n                // handle success\r\n                this.setState({ categoryDetails: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let {image, productName, description} = this.state.productDetails;\r\n        return (\r\n            <div id=\"productDetails\" className=\"container\">\r\n                <h2>Product Details Page</h2>\r\n                <hr/>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                        <img className=\"card-img-top\" src={image} alt={productName} />\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <p>Category: {this.state.categoryDetails.name}</p>\r\n                        <p>Product Name: {productName}</p>\r\n                        <p>Product Description: {description} </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \r\nimport './App.css';\r\nimport Product from './Components/Product';\r\nimport ProductDetails from './Components/ProductDetails';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n     <Switch>\r\n       <Route exact path='/' component={Product} />   \r\n       <Route path='/product/:id' component={ProductDetails} /> \r\n     </Switch>  \r\n    </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}